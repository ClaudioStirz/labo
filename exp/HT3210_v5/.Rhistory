efecto=data.frame("Farmaceutico"=factor(c(rep(1,10),rep(2,10),rep(3,10))),
"Efectogastrico"=c(plac,asp,drog))
efecto
plot4=ggplot(efecto,aes(x=Farmaceutico,y=Efectogastrico,fill=Farmaceutico))+geom_boxplot()
plot4
efecto.anova=aov(Efectogastrico~Farmaceutico,data=efecto)
efecto.anova
# Devuelve la s
�ntesis de la prueba
summary(efecto.anova)
#Prueba de Normalidad
shapiro.test(residuals(efecto.anova))
#Prueba de homocedasticidad
leveneTest(efecto$Efectogastrico, efecto$Farmaceutico)
GrupoA=c(25,36,36,25,36,16,25,36,49,36,25)
GrupoB=c(121,36,36,64,36,81,49,25,64,49,121)
GrupoC=c(81,81,36,9,25,36,9,49,169,1,81)
GrupoD=c(25,25,36,25,36,25,25,25,25,25,25)
Tiempos=cbind(GrupoA,GrupoB,GrupoC,GrupoD)
Tiempos
tiempo=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD))
tiempo
plot5=ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
plot5
medias5=apply(Tiempos,2,mean)
medias5
desvios5=apply(Tiempos,2,sd)
desvios5
salida5=round(cbind(medias5,desvios5),3)
salida5
Tiempo.anova=aov(Tiempos~Grupos,data=tiempo)
Tiempo.anova
summary(Tiempo.anova)
shapiro.test(residuals(Tiempo.anova))
leveneTest(tiempo$Tiempos, tiempo$Grupos)
boxCox(tiempo$Tiempos~tiempo$Grupos,plotit=T)
tiempoTr=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD)^0.5)
tiempoTr
Tiempo.anovaTr=aov(Tiempos~Grupos,data=tiempoTr)
Tiempo.anovaTr
summary(Tiempo.anovaTr)
#Nuevamente se rechaza pero no sabemos si se cumplen los supuestos.
shapiro.test(residuals(Tiempo.anovaTr))
leveneTest(tiempoTr$Tiempos, tiempoTr$Grupos)
kruskal.test(Tiempos~Grupos,data=tiempo)
#Tukey's range test: en R existe la funci
�n kruskalmc() del paquete pgirmess.
kruskalmc(Tiempos~Grupos,data=tiempo)
#kruskalmc(Tiempos~Grupos,data=tiempoTr)
#pairwise.t.test(Tiempos~Grupos,data=tiempo)
pairwise.t.test(tiempo$Tiempos, tiempo$Grupos, p.adj = "bonferroni")
#instalamos librerias
library(FactoMineR)
library(foreign)
library(psych)
library(knitr)
library(xtable)
library(dendextend)
if (!require('devtools')) install.packages('devtools');
devtools::install_github('talgalili/dendextendRcpp')
#ejercicio 1
a=c(1,2,5,6,3,4)
b=c(3,4,0,1,2,1)
matM=data.frame(cbind(a,b))
#grafica en R2
plot(a,b,xlab="Var1", ylab="Var2", main="graficando en R2")
#dendrograma correspondiente utilizando
#el criterio del vecino m
�s lejano ( distancia eucl
�dea)
M.clust.lej = as.dendrogram(hclust(dist(matM, "euclidean"), method = "complete")) %>% set("branches_lwd", 2)
plot(M.clust.lej)
#dendrograma correspondiente utilizando
#el criterio del vecino m
�s lejano ( distancia eucl
�dea)
M.clust.lej = as.dendrogram(hclust(dist(matM, "euclidean"), method = "complete")) %>% set("branches_lwd", 3)
plot(M.clust.lej)
#(b) Igual que el anterior, utilizando el criterio de vecino m
�s cercano
M.clust.cer = as.dendrogram(hclust(dist(matM, "euclidean"), method = "single")) %>% set("branches_lwd", 2)
plot(M.clust.cer)
#y con el criterio promedio
M.clust.prom = as.dendrogram(hclust(dist(matM, "euclidean"), method = "average")) %>% set("branches_lwd", 2)
plot(M.clust.prom)
#c) Repita el ejercicio utilizando las variables estandarizadas. Compare los
#resultados
matM.escalada=scale(matM)
#Datos escalados, vecino m
�s lejano:
M.clust.scale.lej = as.dendrogram(hclust(dist(matM.escalada, "euclidean"), method = "complete")) %>% set("branches_lwd", 2)
tanglegram(dendlist("Normalizado" = M.clust.scale.lej, "Original" = M.clust.lej))
#Datos escalados, vecino m
�s cercano:
M.clust.scale.cer = as.dendrogram(hclust(dist(matM.escalada, "euclidean"), method = "single")) %>% set("branches_lwd", 2)
tanglegram(dendlist("Normalizado" = M.clust.scale.cer, "Original" = M.clust.cer))
#Datos escalados, vecino promedio:
M.clust.scale.prom = as.dendrogram(hclust(dist(matM.escalada, "euclidean"), method = "average")) %>% set("branches_lwd", 2)
tanglegram(dendlist("Normalizado" = M.clust.scale.prom, "Original" = M.clust.prom))
D = matrix(c(0, 4, 18, 20, 18, 0, 0, 10, 15, 20,0,0,0, 24, 8, 0, 0, 0, 0, 6, 0, 0,0, 0, 0), ncol = 5)
kable(D, align = "c")
D = as.dist(D)#para que se interprete como matrices de distancias
#dendogramas
D.clust.lej = as.dendrogram(hclust(D, method = "single")) %>% set("branches_lwd", 2)
plot(D.clust.lej)
D.clust.cer = as.dendrogram(hclust(D, method = "complete")) %>% set("branches_lwd", 2)
plot(D.clust.cer)
D.clust.prom = as.dendrogram(hclust(D, method = "average")) %>% set("branches_lwd", 2)
plot(D.clust.prom)
D.dend = dendlist("Cercano" = D.clust.cer, "Lejano" = D.clust.lej, "Promedio" = D.clust.prom)
plot(D.dend)
#Para encintrar las  diferencias entre los resultados obtenidos se usa un corrplot
corrplot(cor.dendlist(D.dend))
pizzas <- data.frame(read_excel("Pizzas.xls"))
#Para encintrar las  diferencias entre los resultados obtenidos se usa un corrplot
corrplot(cor.dendlist(D.dend))
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gr
�ficos
library(plotrix) ##Paquete para gr
�ficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimizaci
�n del stress
library(UsingR)
library(pgirmess)
library(MASS)
library(carData)
library(car)
library(caret)
library(exactRankTests)
install.packages("coin")
Tiempo1=c(0.17,0.26,0.19,0.34,0.52,0.33,0.23,0.20,0.18,0.22,0.21,0.22,0.28,0.25,0.90,0.33,0.22,0.17,0.39,0.27)
Tiempo1
Tiempo1=sort(Tiempo1)
Tiempo1
Tiempo2=sort(Tiempo2)
Tiempo2
tiempo=data.frame(Tiempo1,Tiempo2)
tiempo
tiem1=data.frame("Tiempo"=c(Tiempo1,Tiempo2),"tipo"=factor(c(rep("1",20),rep("2",20))))
plot2=ggplot(tiem1,aes(x=tipo,y=Tiempo,fill=tipo))+geom_boxplot()
plot2
#analizo la normalidad : Shapiro W. es mas poderosa para muestras chicas
shapiro.test(Tiempo1)
shapiro.test(Tiempo2)
boxCox(Tiempo1~1,plotit = T)
boxCox(Tiempo2~1,plotit = T)
#se sugiere transformar los datos con una potencia cercana a -1.5
tiempo1=Tiempo1^(-1.3)
tiempo2=Tiempo2^(-1.3)
shapiro.test(tiempo1)
shapiro.test(tiempo2)
#supongo igualdad de varianzas, aplico test de igualdad de medias
t.test(tiempo1,tiempo2,alternative = "two.sided")
#metodo no param
�trico
#wilcox.test(Tiempo1,Tiempo2,alternative = "two.sided")
wilcox.exact(Tiempo1,Tiempo2, paired = TRUE)
marca1=c(24.4,22.6,23.8,22.0,24.5,22.3,25.0,24.5)
marca2=c(10.2,12.1,10.3,10.2,9.9,11.2,12.0,9.5)
marca3=c(19.2,19.4,19.8,19.0,19.6,18.3,20.0,19.4)
marca4=c(17.4,18.1,16.7,18.3,17.6,17.5,18.0,16.4)
marca5=c(13.4,15.0,14.1,13.1,14.9,15.0,13.4,14.8)
marca6=c(21.3,20.2,20.7,20.8,20.1,18.8,21.1,20.3)
marca=cbind(marca1,marca2,marca3,marca4,marca5,marca6)
sodio=data.frame("marca"=factor(c(rep(1,8),rep(2,8),rep(3,8),
rep(4,8),rep(5,8),rep(6,8))),
"sodio"=c(marca1,marca2,marca3,marca4,marca5,
marca6))
sodio
plot2=ggplot(sodio,aes(x=marca,y=sodio,fill=marca))+geom_boxplot()
plot2
#2) Calcular la media y el desv
�o de cada uno de los grupos.
dim(marca)
medias=apply(marca,2,mean)
medias
#medias
desvios=apply(marca,2,sd)
desvios
#desvios
salida2=round(cbind(medias,desvios),3)
salida2
#Esta es la forma de pedir un ANOVA en R:
sodio.aov=aov(sodio~marca,data=sodio)
sodio.aov
#Pedimos un resumen de la tabla del ANOVA (pvalor calculado <0,05 implica se rechaza H0)
summary(sodio.aov)
shapiro.test(residuals(sodio.aov))
residuals(sodio.aov) #vector numerico
shapiro.test(residuals(sodio.aov))
leveneTest(sodio$sodio, sodio$marca)
#Test de Mann-Whitney entre cada par de grupos con correcci
�n de significancia
pairwise.t.test(sodio$sodio, sodio$marca, p.adj = "bonferroni")
#La prueba de Tukey nos permite comparar las medias individuales provenientes
#de un an
�lisis de varianza de varias muestras sometidas a tratamientos distintos.
TukeyHSD(sodio.aov, "marca")
####cuando no se cumplen las hip
�tesis en el modelo de anova  se usa Kruskal Wallis
kruskal.test(sodio~marca,data=sodio)
kruskalmc(sodio~marca,data=sodio)
plot(sodio.aov,data=sodio)
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8)
supl=cbind(S1,S2,S3,S4)
supl
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5); S1=sort(S1)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3); S2=sort(S2)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4); S3=sort(S3)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8); S4=sort(S4)
supl=cbind(S1,S2,S3,S4)
supl
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
medias=apply(supl,2,mean)
desvios=apply(supl,2,sd)
Resumen3=round(cbind(medias,desvios),3)
Resumen3
plot3=ggplot(efic,aes(x=Suplemento,y=Eficiencia,fill=Suplemento))+geom_boxplot()
plot3
#3)Testear las hip
�tesis con nivel de significaci
�n del 5%  (esto es ANOVA a aplicar)
shapiro.test(supl) #p-value = 0.2906 entonces H0="las medias son iguales" no se rechaza con 5% de significacion (esto no iria!!!)
efic.aov=aov(Eficiencia~Suplemento,data=efic)
efic.aov
summary(efic.aov)
shapiro.test(residuals(efic.aov))
leveneTest(efic$Eficiencia, efic$Suplemento)
#e) cuales son distintas
TukeyHSD(efic.aov, "Suplemento")
plac=c(0,3,2,3,4,2,2,3,1,1)
asp=c(1,4,3,0,2,3,4,5,2,3)
drog=c(4,5,4,2,3,4,1,5,3,0)
plac=c(0,3,2,3,4,2,2,3,1,1); plac=sort(plac)
asp=c(1,4,3,0,2,3,4,5,2,3); asp=sort(asp)
drog=c(4,5,4,2,3,4,1,5,3,0); drog=sort(drog)
farma=cbind(plac,asp,drog)
farma
efecto=data.frame("Farmaceutico"=factor(c(rep(1,10),rep(2,10),rep(3,10))),
"Efectogastrico"=c(plac,asp,drog))
efecto
plot4=ggplot(efecto,aes(x=Farmaceutico,y=Efectogastrico,fill=Farmaceutico))+geom_boxplot()
plot4
efecto.anova=aov(Efectogastrico~Farmaceutico,data=efecto)
efecto.anova
# Devuelve la s
�ntesis de la prueba
summary(efecto.anova)
#Prueba de Normalidad
shapiro.test(residuals(efecto.anova))
#Prueba de homocedasticidad
leveneTest(efecto$Efectogastrico, efecto$Farmaceutico)
GrupoA=c(25,36,36,25,36,16,25,36,49,36,25); GrupoA=sort(GrupoA)
GrupoB=c(121,36,36,64,36,81,49,25,64,49,121); GrupoB=sort(GrupoB)
GrupoC=c(81,81,36,9,25,36,9,49,169,1,81); GrupoC=sort(GrupoC)
GrupoD=c(25,25,36,25,36,25,25,25,25,25,25); GrupoD=sort(GrupoD)
Tiempos=cbind(GrupoA,GrupoB,GrupoC,GrupoD)
Tiempos
tiempo=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD))
tiempo
plot5=ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
plot5
medias5=apply(Tiempos,2,mean)
medias5
desvios5=apply(Tiempos,2,sd)
desvios5
salida5=round(cbind(medias5,desvios5),3)
salida5
Tiempo.anova=aov(Tiempos~Grupos,data=tiempo)
Tiempo.anova
summary(Tiempo.anova)
shapiro.test(residuals(Tiempo.anova))
leveneTest(tiempo$Tiempos, tiempo$Grupos)
boxCox(tiempo$Tiempos~tiempo$Grupos,plotit=T)
tiempoTr=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD)^0.5)
tiempoTr
Tiempo.anovaTr=aov(Tiempos~Grupos,data=tiempoTr)
Tiempo.anovaTr
summary(Tiempo.anovaTr)
#Nuevamente se rechaza pero no sabemos si se cumplen los supuestos.
shapiro.test(residuals(Tiempo.anovaTr))
leveneTest(tiempoTr$Tiempos, tiempoTr$Grupos)
kruskal.test(Tiempos~Grupos,data=tiempo)
#kruskal.test(Tiempos~Grupos,data=tiempoTr)
library(pgirmess)
#Tukey's range test: en R existe la funci
�n kruskalmc() del paquete pgirmess.
kruskalmc(Tiempos~Grupos,data=tiempo)
#kruskalmc(Tiempos~Grupos,data=tiempoTr)
#pairwise.t.test(Tiempos~Grupos,data=tiempo)
pairwise.t.test(tiempo$Tiempos, tiempo$Grupos, p.adj = "bonferroni")
install.packages("MVN")
install.packages("gsl")
boxCox(tiempo$Tiempos~tiempo$Grupos,plotit=T)
#se sugiere transformar los datos con una potencia cercana a -1.5
tiempo1=Tiempo1^(-1.3)
tiempo2=Tiempo2^(-1.3)
boxCox(Tiempo1~1,plotit = T)
boxCox(Tiempo2~1,plotit = T)
boxCox(tiempo$Tiempos~tiempo$Grupos,plotit=T)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ',
'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
install.packages("IRkernel")
install.packages(c('Matrix', 'Hmisc' , 'rlist' , 'yaml' ,
'parallel' , 'primes' , 'bit64' , 'IRdisplay' ,
'repr' , 'vioplot' , 'DT' , 'ROCR' , 'R.utils'))
install.packages(c('data.table'))
install.packages(c('rpart' , 'rpart.plot' , 'treeClust'))
install.packages(c('ranger' , 'randomForest'))
install.packages(c('xgboost' , 'lightgbm'))
install.packages(c('Bayesiana DiceKriging' , 'mlrMBO'))
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gr
�ficos
library(plotrix) ##Paquete para gr
�ficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimizaci
�n del stress
library(UsingR)
library(pgirmess)
library(MASS)
library(carData)
library(car)
library(caret)
library(exactRankTests)
Tiempo1=c(0.17,0.26,0.19,0.34,0.52,0.33,0.23,0.20,0.18,0.22,0.21,0.22,0.28,0.25,0.90,0.33,0.22,0.17,0.39,0.27)
Tiempo1=sort(Tiempo1)
Tiempo1
Tiempo2=c(0.18,0.33,0.23,0.16,0.19,0.30,0.21,0.20,0.16,0.21,0.20,0.30,0.32,0.20,0.19,0.22,0.27,0.24,0.29,0.27)
Tiempo2=sort(Tiempo2)
Tiempo2
tiempo=data.frame(Tiempo1,Tiempo2)
tiempo
tiem1=data.frame("Tiempo"=c(Tiempo1,Tiempo2),"tipo"=factor(c(rep("1",20),rep("2",20))))
plot2=ggplot(tiem1,aes(x=tipo,y=Tiempo,fill=tipo))+geom_boxplot()
plot2
#analizo la normalidad : Shapiro W. es mas poderosa para muestras chicas
shapiro.test(Tiempo1)
shapiro.test(Tiempo2)
boxCox(Tiempo1~1,plotit = T)
boxCox(Tiempo2~1,plotit = T)
#se sugiere transformar los datos con una potencia cercana a -1.5
tiempo1=Tiempo1^(-1.3)
tiempo2=Tiempo2^(-1.3)
shapiro.test(tiempo1)
shapiro.test(tiempo2)
#supongo igualdad de varianzas, aplico test de igualdad de medias
t.test(tiempo1,tiempo2,alternative = "two.sided")
tiem=data.frame("Tiempo"=c(tiempo1,tiempo2),"tipo"=factor(c(rep("1",20),rep("2",20))))
plot1=ggplot(tiem,aes(x=tipo,y=Tiempo,fill=tipo))+geom_boxplot()
plot1
#metodo no param
�trico
#wilcox.test(Tiempo1,Tiempo2,alternative = "two.sided")
wilcox.exact(Tiempo1,Tiempo2, paired = TRUE)
marca1=c(24.4,22.6,23.8,22.0,24.5,22.3,25.0,24.5)
marca2=c(10.2,12.1,10.3,10.2,9.9,11.2,12.0,9.5)
marca3=c(19.2,19.4,19.8,19.0,19.6,18.3,20.0,19.4)
marca4=c(17.4,18.1,16.7,18.3,17.6,17.5,18.0,16.4)
marca5=c(13.4,15.0,14.1,13.1,14.9,15.0,13.4,14.8)
marca6=c(21.3,20.2,20.7,20.8,20.1,18.8,21.1,20.3)
marca=cbind(marca1,marca2,marca3,marca4,marca5,marca6)
sodio=data.frame("marca"=factor(c(rep(1,8),rep(2,8),rep(3,8),
rep(4,8),rep(5,8),rep(6,8))),
"sodio"=c(marca1,marca2,marca3,marca4,marca5,
marca6))
sodio
plot2=ggplot(sodio,aes(x=marca,y=sodio,fill=marca))+geom_boxplot()
plot2
#2) Calcular la media y el desv
�o de cada uno de los grupos.
dim(marca)
medias=apply(marca,2,mean)
medias
#med1=apply(hemof[hemof$Portador=="1",2:3],2,mean)
#mean(sodio$sodio) #media general
#medias
desvios=apply(marca,2,sd)
desvios
#desvios
salida2=round(cbind(medias,desvios),3)
salida2
#Esta es la forma de pedir un ANOVA en R:
sodio.aov=aov(sodio~marca,data=sodio)
sodio.aov
#Pedimos un resumen de la tabla del ANOVA (pvalor calculado <0,05 implica se rechaza H0)
summary(sodio.aov) #p-value=0.00000000000000016
shapiro.test(residuals(sodio.aov)) #p-value=0.1742
residuals(sodio.aov) #vector numerico
leveneTest(sodio$sodio, sodio$marca) #p-value=0.3376
leveneTest(residuals(sodio.aov), sodio$marca) #p-value=0.3376
leveneTest(sodio$sodio, sodio$marca) #p-value=0.3376
leveneTest(residuals(sodio.aov), sodio$marca) #p-value=0.3376
#Test de Mann-Whitney entre cada par de grupos con correccion de significancia
pairwise.t.test(sodio$sodio, sodio$marca, p.adj = "bonferroni")
#La prueba de Tukey nos permite comparar las medias individuales provenientes
#de un analisis de varianza de varias muestras sometidas a tratamientos distintos.
TukeyHSD(sodio.aov, "marca")
####cuando no se cumplen las hipotesis en el modelo de anova  se usa Kruskal Wallis
kruskal.test(sodio~marca,data=sodio)
kruskalmc(sodio~marca,data=sodio)
plot(sodio.aov,data=sodio)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3); S2=sort(S2);
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4); S3=sort(S3);
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8); S4=sort(S4);
supl=cbind(S1,S2,S3,S4)
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
medias=apply(supl,2,mean)
desvios=apply(supl,2,sd)
Resumen3=round(cbind(medias,desvios),3)
Resumen3
plot3=ggplot(efic,aes(x=Suplemento,y=Eficiencia,fill=Suplemento))+geom_boxplot()
plot3
#3)Testear las hipotesis con nivel de significacion del 5%  (esto es ANOVA a aplicar)
shapiro.test(supl) #p-value = 0.2906 entonces H0="las medias son iguales" no se rechaza con 5% de significacion (esto no iria!!!)
efic.aov=aov(Eficiencia~Suplemento,data=efic)
efic.aov
summary(efic.aov) #p-value=0.0000000326
shapiro.test(residuals(efic.aov)) #p-value=0.6414 (normalidad)
leveneTest(efic$Eficiencia, efic$Suplemento) #p-value=0.4716 (homocedasticidad)
leveneTest(residuals(efic.aov), efic$Suplemento) #p-value=0.4716 (homocedasticidad)
leveneTest(residuals(efic.aov), efic$Suplemento) #p-value=0.4716 (homocedasticidad) es igual efic$Eficiencia/residuals(efic.aov)
leveneTest(efic$Eficiencia, efic$Suplemento)
#e) cuales son distintas
TukeyHSD(efic.aov, "Suplemento")
plac=c(0,3,2,3,4,2,2,3,1,1); plac=sort(plac)
asp=c(1,4,3,0,2,3,4,5,2,3); asp=sort(asp)
drog=c(4,5,4,2,3,4,1,5,3,0); drog=sort(drog)
farma=cbind(plac,asp,drog)
efecto=data.frame("Farmaceutico"=factor(c(rep(1,10),rep(2,10),rep(3,10))),
"Efectogastrico"=c(plac,asp,drog))
efecto
plot4=ggplot(efecto,aes(x=Farmaceutico,y=Efectogastrico,fill=Farmaceutico))+geom_boxplot()
plot4
efecto.anova=aov(Efectogastrico~Farmaceutico,data=efecto)
efecto.anova
# Devuelve la s
�ntesis de la prueba
summary(efecto.anova)
#Prueba de Normalidad
shapiro.test(residuals(efecto.anova))
#Prueba de homocedasticidad
leveneTest(efecto$Efectogastrico, efecto$Farmaceutico)
GrupoA=c(25,36,36,25,36,16,25,36,49,36,25); GrupoA=sort(GrupoA);
GrupoB=c(121,36,36,64,36,81,49,25,64,49,121); GrupoB=sort(GrupoB);
GrupoC=c(81,81,36,9,25,36,9,49,169,1,81); GrupoC=sort(GrupoC);
GrupoD=c(25,25,36,25,36,25,25,25,25,25,25); GrupoD=sort(GrupoD);
Tiempos=cbind(GrupoA,GrupoB,GrupoC,GrupoD)
tiempo=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD))
tiempo
plot5=ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
plot5
medias5=apply(Tiempos,2,mean)
medias5
desvios5=apply(Tiempos,2,sd)
desvios5
salida5=round(cbind(medias5,desvios5),3)
salida5
Tiempo.anova=aov(Tiempos~Grupos,data=tiempo)
Tiempo.anova
summary(Tiempo.anova) #p-value=0.0255
shapiro.test(residuals(Tiempo.anova)) #p-value=0.00007444
leveneTest(tiempo$Tiempos, tiempo$Grupos) #p-value=0.005273
boxCox(tiempo$Tiempos~tiempo$Grupos,plotit=T)
tiempoTr=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD)^0.5)
tiempoTr
Tiempo.anovaTr=aov(Tiempos~Grupos,data=tiempoTr)
Tiempo.anovaTr
summary(Tiempo.anovaTr) #p-value=0.0356
#Nuevamente se rechaza pero no sabemos si se cumplen los supuestos.
shapiro.test(residuals(Tiempo.anovaTr)) #p-value=0.005781
leveneTest(tiempoTr$Tiempos, tiempoTr$Grupos) #p-value=0.0004478
kruskal.test(Tiempos~Grupos,data=tiempo) #p-value=0.007357
#kruskal.test(Tiempos~Grupos,data=tiempoTr)
library(pgirmess)
#Tukey's range test: en R existe la funci
�n kruskalmc() del paquete pgirmess.
kruskalmc(Tiempos~Grupos,data=tiempo) #existe diferencia entre el grupo 2 y el 4.
#kruskalmc(Tiempos~Grupos,data=tiempoTr)
#pairwise.t.test(Tiempos~Grupos,data=tiempo)
pairwise.t.test(tiempo$Tiempos, tiempo$Grupos, p.adj = "bonferroni")
Anal1=c(84.99,84.02,84.38)
Anal2=c(85.15,85.13,84.88)
Anal3=c(84.72,84.48,85.16)
Anal4=c(84.20,84.10,84.55)
Anal=rbind(Anal1,Anal2,Anal3,Anal4)
Anal
library("IRkernel")
IRkernel::installspec()
library( "IRkernel" )
IRkernel::installspec()
quit()
source("C:/Users/Administrador/Desktop/UTNFRP/AplicacionesaEconomiayFinanzas/Laboratorio/labo/src/rpart/321_rpart_BO.r")
source("C:/Users/Administrador/Desktop/UTNFRP/AplicacionesaEconomiayFinanzas/Laboratorio/labo/src/rpart/242_aplicar_rpart_kaggle.r")
source("C:/Users/Administrador/Desktop/UTNFRP/AplicacionesaEconomiayFinanzas/Laboratorio/labo/src/rpart/321_rpart_BO.r")
